diff --git a/drivers/char/brcm/hal_cam/camdrv_ov5640_Org.c b/drivers/char/brcm/hal_cam/camdrv_ov5640_Org.c
index be03d77..b71a71f 100755
--- a/drivers/char/brcm/hal_cam/camdrv_ov5640_Org.c
+++ b/drivers/char/brcm/hal_cam/camdrv_ov5640_Org.c
@@ -4920,7 +4920,7 @@ SensorSetPreviewMode(CamImageSize_t image_resolution, CamDataFmt_t image_format)
 		ov5640_write(0x3108, 0x01); // system divider
 		///ov5640_write(0x3035, 0x12); // pll
 		//ov5640_write(0x3036, 0x38); // pll
-		ov5640_write(0x3035, 0x22); ///21   //chg by hanwei for effect optimization 20120410
+		ov5640_write(0x3035, 0x11); ///21   //chg by hanwei for effect optimization 20120410
 		ov5640_write(0x3036, 0x46);
 		ov5640_write(0x3c07, 0x08); // light meter 1 threshold
 		ov5640_write(0x3820, 0x47);	//0x41);  filp
@@ -4933,14 +4933,21 @@ SensorSetPreviewMode(CamImageSize_t image_resolution, CamDataFmt_t image_format)
 		ov5640_write(0x3803, 0x04); // VS
 		ov5640_write(0x3806, 0x07); // VH
 		ov5640_write(0x3807, 0x9b); // VH
-		ov5640_write(0x3808, 0x02); // DVPHO
+		#if 0   //1024*768
+		ov5640_write(0x3808, 0x04); // DVPHO //640//1024
+		ov5640_write(0x3809, 0x00); // DVPHO
+		ov5640_write(0x380a, 0x03); // DVPVO //480//768
+		ov5640_write(0x380b, 0x00); // DVPVO
+		#else	//640*480
+		ov5640_write(0x3808, 0x02); // DVPHO //640//1024
 		ov5640_write(0x3809, 0x80); // DVPHO
-		ov5640_write(0x380a, 0x01); // DVPVO
+		ov5640_write(0x380a, 0x01); // DVPVO //480//768
 		ov5640_write(0x380b, 0xe0); // DVPVO
-		ov5640_write(0x380c, 0x07); // HTS
-		ov5640_write(0x380d, 0x68); // HTS
-		ov5640_write(0x380e, 0x03); // VTS
-		ov5640_write(0x380f, 0xd8); // VTS
+		#endif
+		ov5640_write(0x380c, 0x07); // HTS //1896
+		ov5640_write(0x380d, 0x68); // HTS 
+		ov5640_write(0x380e, 0x05); // VTS //05c0 //1472
+		ov5640_write(0x380f, 0xc0); // VTS
 		ov5640_write(0x3813, 0x06); // V offset
 		ov5640_write(0x3618, 0x00);
 
@@ -4950,7 +4957,7 @@ SensorSetPreviewMode(CamImageSize_t image_resolution, CamDataFmt_t image_format)
 		//ov5640_write(0x3a02, 0x03); // 60Hz max exposure     //del for fix bug#9962 20120410
 		//ov5640_write(0x3a03, 0xd8); // 60Hz max exposure	 //del for fix bug#9962 20120410
 		ov5640_write(0x3a08, 0x00); // B50 h
-		ov5640_write(0x3a09, 0x5c); // B50 low
+		ov5640_write(0x3a09, 0xb8); // B50 low //5c
 		ov5640_write(0x3a0a, 0x00); // B60 high
 		ov5640_write(0x3a0b, 0xf6); // B60 low
 		ov5640_write(0x3a0e, 0x03); // B50 max
@@ -5085,6 +5092,7 @@ static HAL_CAM_Result_en_t CAMDRV_SetVideoCaptureMode_Pri(CamImageSize_t image_r
  ****************************************************************************/
 static HAL_CAM_Result_en_t CAMDRV_SetExposure_Pri(int value)
 { 
+	//return HAL_CAM_SUCCESS;
 	HAL_CAM_Result_en_t result = HAL_CAM_SUCCESS;
 
 	printk("YUDE>>>>>----  CAMDRV_SetExposure_Pri    EV_value = %d --------\r\n",value );
@@ -5110,6 +5118,9 @@ static HAL_CAM_Result_en_t CAMDRV_SetExposure_Pri(int value)
 		ov5640_write(0x3a1b, 0x60);
 		ov5640_write(0x3a1e, 0x58);
 		ov5640_write(0x3a1f, 0x20);
+
+
+
 	}
 	else if(value ==3)
 	{
@@ -5130,6 +5141,9 @@ static HAL_CAM_Result_en_t CAMDRV_SetExposure_Pri(int value)
 		ov5640_write(0x3a1b, 0x20);
 		ov5640_write(0x3a1e, 0x18);
 		ov5640_write(0x3a1f, 0x10);
+
+
+
 	}
 	else if(value== -5)
 	{
@@ -5140,6 +5154,10 @@ static HAL_CAM_Result_en_t CAMDRV_SetExposure_Pri(int value)
 		ov5640_write(0x3a1e, 0x08);
 		ov5640_write(0x3a11, 0x20);
 		ov5640_write(0x3a1f, 0x10);
+		
+
+
+
 
 	}
 	else{
@@ -5199,7 +5217,7 @@ static HAL_CAM_Result_en_t CAMDRV_SetFrameRate_Pri(CamRates_t fps,
    			ov5640_write(0x3a0d, 0x04);
 			*/
 			//fps=15
-			ov5640_write(0x3035, 0x22); //21	//chg by hanwei for effect optimization 20120410
+			ov5640_write(0x3035, 0x11); //21	//chg by hanwei for effect optimization 20120410
    			ov5640_write(0x3036, 0x46); //46
 			//ov5640_write(0x3a08, 0x0);  //fix preview banding
    			//ov5640_write(0x3a09, 0x94);//fix preview banding
@@ -5446,14 +5464,13 @@ static HAL_CAM_Result_en_t CAMDRV_CfgStillnThumbCapture_Pri(CamImageSize_t
 	
 		 // read preview shutter
 		 preview_shutter = OV5640_get_shutter();
-
 		printk(KERN_ERR"youle_ov: preview_shutter =%d \n",preview_shutter);
 		 // read preview gain
 		 preview_gain16 = OV5640_get_gain16();
 		printk(KERN_ERR"youle_ov: preview_gain16 =%d \n",preview_gain16);
 		 // get average
 		 average = ov5640_read(0x56a1);
-	
+		printk(KERN_ERR"youle_ov: average =%d \n",average);
 		 // turn off night mode for capture
 		/* OV5640_set_night_mode(0);   midifyied by leyou */
 	
@@ -5517,14 +5534,14 @@ static HAL_CAM_Result_en_t CAMDRV_CfgStillnThumbCapture_Pri(CamImageSize_t
 #endif
 		 // write capture gain
 		 OV5640_set_gain16(capture_gain16);
-	// printk(KERN_ERR"youle_ov  -2: capture_gain16 =%d \n",capture_gain16);
+	printk(KERN_ERR"youle_ov  -2: capture_gain16 =%d \n",capture_gain16);
 		 // write capture shutter
 		 if (capture_shutter > (capture_VTS - 4)) {
 			 capture_VTS = capture_shutter + 4;
 			 OV5640_set_VTS(capture_VTS);
 		 }
 		 OV5640_set_shutter(capture_shutter);
-	// printk(KERN_ERR"youle_ov -2: capture_shutter =%d \n",capture_shutter);
+	printk(KERN_ERR"youle_ov -2: capture_shutter =%d \n",capture_shutter);
 	
 		 // skip 2 vysnc
 		// printk("youle_ov: sleep 500ms has added \n");
@@ -5556,7 +5573,7 @@ static HAL_CAM_Result_en_t CAMDRV_SetSceneMode_Pri(CamSceneMode_t scene_mode,
 		case CamSceneMode_Auto:
 			pr_info("CAMDRV_SetSceneMode() called for AUTO\n");
 			ov5640_write(0x3a19, 0x7e);//gain ceiling 8x		
-			ov5640_write(0x3a00, 0x3c);//enable night mode--auto framerate	
+			ov5640_write(0x3a00, 0x78);//enable night mode--auto framerate	//78//3c
 			ov5640_write(0x3a02 ,0x05);// 60 maximum exposure.reduce 1/2	
 			ov5640_write(0x3a03 ,0x8b);		
 			ov5640_write(0x3a14 ,0x05);		
@@ -5568,7 +5585,7 @@ static HAL_CAM_Result_en_t CAMDRV_SetSceneMode_Pri(CamSceneMode_t scene_mode,
 		case CamSceneMode_Night:
 			pr_info("CAMDRV_SetSceneMode() called for Night\n");
 			ov5640_write(0x3a19, 0xF8);//0x7c//gain ceiling 8x		
-			ov5640_write(0x3a00, 0x3c);//enable night mode		
+			ov5640_write(0x3a00, 0x7c);//enable night mode	 //7c	
 			ov5640_write(0x3a02 ,0x0b);//6  60Hz, maximum exposures, , reduce 1/3		
 			ov5640_write(0x3a03 ,0x0a);			
 			ov5640_write(0x3a14 ,0x0b);//08		
@@ -5582,13 +5599,13 @@ static HAL_CAM_Result_en_t CAMDRV_SetSceneMode_Pri(CamSceneMode_t scene_mode,
 			pr_info("CAMDRV_SetSceneMode() not supported for %d\n", scene_mode);
 
 			ov5640_write(0x3a19, 0x7e);//gain ceiling 8x		
-			ov5640_write(0x3a00, 0x3c);//enable night mode--auto framerate	
+			ov5640_write(0x3a00, 0x78);//enable night mode--auto framerate	//78
 			ov5640_write(0x3a02 ,0x05);// 60 maximum exposure.reduce 1/2	
 			ov5640_write(0x3a03 ,0x8b);		
 			ov5640_write(0x3a14 ,0x05);		
 			ov5640_write(0x3a15 ,0x8b);	
 			//printk("------default-------0x3a00 = 0x%x --------\n",ov5640_read(0x3a00));
-			//printk("------default-------0x3a14 = 0x%x --------\n",ov5640_read(0x3a14));
+			//printk("------default-------0x3a14 = 0x%x --------\n",ov5640_read(0x3a14));    
 			break;
 	}
 	if (sCamI2cStatus != HAL_CAM_SUCCESS) {
@@ -5610,6 +5627,7 @@ static HAL_CAM_Result_en_t CAMDRV_SetSceneMode_Pri(CamSceneMode_t scene_mode,
 static HAL_CAM_Result_en_t CAMDRV_SetWBMode_Pri(CamWB_WBMode_t wb_mode,
 		CamSensorSelect_t sensor)
 {
+       //return HAL_CAM_SUCCESS;
 	HAL_CAM_Result_en_t result = HAL_CAM_SUCCESS;
 	pr_info("CAMDRV_SetWBMode()  called  wb_mode = 0x%x \n",wb_mode);
 	switch (wb_mode)
@@ -5751,6 +5769,10 @@ void OV5640_set_bandingfilter()
 static HAL_CAM_Result_en_t CAMDRV_SetAntiBanding_Pri(CamAntiBanding_t effect,
 		CamSensorSelect_t sensor)
 {
+
+	OV5640_set_bandingfilter();
+       return HAL_CAM_SUCCESS;
+	   
 	UInt16 temp;
 	HAL_CAM_Result_en_t result = HAL_CAM_SUCCESS;
 	printk("YUDE>>>>>----------CAMDRV_SetAntiBanding()  called-- effect = 0x%x--------\n",effect);
@@ -5855,7 +5877,7 @@ static HAL_CAM_Result_en_t CAMDRV_SetFocusMode_Pri(CamFocusControlMode_t effect,
 	else if (effect == CamFocusControlMacro) {
 		//printk("------------CamFocusControlMacro    0x%x -------------\n",CamFocusControlMacro);
 			ov5640_write(0x3027, 0x00);
-			ov5640_write(0x3028, 0xff);
+			ov5640_write(0x3028, 0xFF);
 			
 			ov5640_write(0x3023, 0x01);
 			ov5640_write(0x3022, 0x1a);
@@ -5886,6 +5908,12 @@ static HAL_CAM_Result_en_t CAMDRV_SetFocusMode_Pri(CamFocusControlMode_t effect,
 			ov5640_write(0x3023, 0x01);
 			ov5640_write(0x3022, 0x08);
 
+			//ov5640_write(0x3027, 0x00);
+			//ov5640_write(0x3028, 0x30);
+			
+			//ov5640_write(0x3023, 0x01);
+			//ov5640_write(0x3022, 0x1a);
+
 			
 			
 			while(  (ov5640_read(0x3023)!=0) &&( max_sleep>0) )
@@ -6097,7 +6125,7 @@ static HAL_CAM_Result_en_t CAMDRV_SetDigitalEffect_Pri(CamDigEffect_t effect,
 		CamSensorSelect_t sensor)
 {
 		printk("YUDE>>>>>----  CAMDRV_SetDigitalEffect_Pri    called-------effect = 0x%x ------\r\n" ,effect);
-
+		//return HAL_CAM_SUCCESS;    
 	UInt8 reg_value;
 	HAL_CAM_Result_en_t result = HAL_CAM_SUCCESS;
 	switch(effect){
@@ -6363,6 +6391,7 @@ static HAL_CAM_Result_en_t Init_OV5640(CamSensorSelect_t sensor)
 		ov5640_write(0x4407, 0x04); // JPEG QS
 		ov5640_write(0x440e, 0x00);
 		ov5640_write(0x5000, 0xa7); // ISP control, Lenc on, gamma on, BPC on, WPC on, CIP on
+		#if 1
 		#if 1  //chg-s by hanwei for effect optimization 20120410
 		/*
 		// AWB ×Ô¶¯°×Æ½ºâ
@@ -6818,6 +6847,7 @@ static HAL_CAM_Result_en_t Init_OV5640(CamSensorSelect_t sensor)
 		ov5640_write(0x3008, 0x02); // wake up
 
 #endif
+#endif
    	tm1 = ktime_get();
 	printk("*camdrv_ov5640_Org.c *   YUDE:>>>>>>    Init_OV5640     end     \n ");	
 	if (sCamI2cStatus != HAL_CAM_SUCCESS) {
